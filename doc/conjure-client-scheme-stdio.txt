                                                 *conjure-client-scheme-stdio*

==============================================================================
CONTENTS                                *conjure-client-scheme-stdio-contents*

    1. Introduction ............ |conjure-client-scheme-stdio-introduction|
    2. Mappings .................... |conjure-client-scheme-stdio-mappings|
    3. Configuration .......... |conjure-client-scheme-stdio-configuration|

==============================================================================
INTRODUCTION                        *conjure-client-scheme-stdio-introduction*
>
  MIT/GNU Scheme is an implementation of the Scheme programming language.

Conjure starts an MIT Scheme REPL within Neovim when you first open a Scheme
(`.scm`) file. You can configure which Scheme REPL is launched with the
`g:conjure#client#scheme#stdio#command` configuration option.

You should be able to evaluate files and forms as you would with other Conjure
supported languages right away.

Check out `:ConjureSchool` if you're unsure about what evaluation operations
you can perform.

 * https://www.gnu.org/software/mit-scheme/

==============================================================================
MAPPINGS                                *conjure-client-scheme-stdio-mappings*

These mappings are the defaults, you can change them as described in
|conjure-mappings| and |conjure-configuration|.

See |conjure-client-scheme-stdio-configuration| for specific configuration
options relevant to these mappings.

<localleader>cs          Start the Scheme REPL if it's not running already.

<localleader>cS          Stop any existing Scheme REPL.

==============================================================================
CONFIGURATION                      *conjure-client-scheme-stdio-configuration*

All configuration can be set as described in |conjure-configuration|.

`g:conjure#client#scheme#stdio#mapping#start`
            Start the Scheme REPL if it's not running already.
            Default: `"cs"`

`g:conjure#client#scheme#stdio#mapping#stop`
            Stop any existing Scheme REPL.
            Default: `"cS"`

`g:conjure#client#scheme#stdio#command`
            Command used to start the Scheme REPL, you can modify this to add
            arguments or change the command entirely.
            Default: `"mit-scheme"`

vim:tw=78:sw=2:ts=2:ft=help:norl:et:listchars=
