                                                                      *conjure*
                    ______              _               ~
                   / ____/___  ____    (_)_  __________ ~
                  / /   / __ \/ __ \  / / / / / ___/ _ \~
                 / /___/ /_/ / / / / / / /_/ / /  /  __/~
                 \____/\____/_/ /_/_/ /\__,_/_/   \___/ ~
                                 /___/                  ~

==============================================================================
CONTENTS                                                    *conjure-contents*

    1. Introduction ............................. |conjure-introduction|
    2. Mappings ..................................... |conjure-mappings|
    3. Configuration ........................... |conjure-configuration|
    4. Log ............................................... |conjure-log|
    5. Clients ....................................... |conjure-clients|

==============================================================================
INTRODUCTION                                            *conjure-introduction*

Conjure allows you to evaluate code and perform actions in a few different
languages. The results of your actions are stored in a log buffer that you can
access at any time.

If you don't have the log buffer open the results will be shown temporarily in
the heads up display (HUD), a floating window that vanishes after you move
your cursor. The HUD can be turned off entirely if you would rather check for
results in your own time.

This documentation will show you which mappings are available by default and
how to configure them to suit you. You'll also learn about the extra features
and mappings that are provided by each language client.

==============================================================================
MAPPINGS                                                    *conjure-mappings*

These are the default mappings, |conjure-configuration| will show you how to
remap them to keys that suit you if required. The default prefix key for
almost all of the mappings is `<localleader>` (|maplocalleader|).

I've also included some commands since they're related to the mappings.

:ConjureEval [code]      Evaluates the given code in the current buffer's
                         language and context. Accepts a range so
                         `:%ConjureEval` would evaluate the entire buffer,
                         this also works with visual selections.

:ConjureConfig [args]    Looks up or sets a configuration value with an
                         optional language client prefix. The values are
                         actual values, not strings. If you want to set
                         something to a string it must be "double quoted".
                         This is so that you can set booleans, lists and
                         numbers where required. The value you're setting is
                         actually parsed as Fennel code, this is almost
                         identical to Clojure data structure syntax.
                          - `:ConjureConfig mappings.prefix`
                            Show the current mapping prefix.
                          - `:ConjureConfig mappings.prefix "<leader>"`
                            Set the mapping prefix.
                          - `:ConjureConfig clojure.nrepl/mappings.interrupt`
                            Show a language specific configuration value.
                          - `:ConjureConfig clojure.nrepl/debug? true`
                            Set a language specific configuration value.
                          - `:ConjureConfig some.other.module/magic? true`
                            Set a 3rd party language specific configuration
                            value. The previous example's `clojure.nrepl` is
                            actually expanded to
                            `conjure.client.clojure.nrepl`, if a module isn't
                            found within `conjure.client.*` though it'll look
                            further afield at 3rd party modules.
                        If you're lazy loading Conjure you may want to define
                        your configuration ahead of time with the
                        `g:conjure_config` variable.

<localleader>ls          Open the log buffer in a new horizontal split window.

<localleader>lv          Open the log buffer in a new vertical split window.

<localleader>lt          Open the log buffer in a new tab. Great for viewing
                         large output. Just close the window to close the tab
                         when you're done and return to your previous layout.

<localleader>E           When in visual mode, evaluate the current selection.

<localleader>E[motion]   Evaluate any given motion following this mapping such
                         as <localleader>`E2j` to evaluate this line and the
                         two below it.

<localleader>ee          Evaluate the current form under the cursor. This is
                         the innermost pair of parenthesis (ignoring those in
                         comments or strings).

<localleader>er          Evaluate the root form under the cursor. This is the
                         outermost pair of parenthesis. Great for evaluating a
                         function you're editing if your cursor is within a
                         few nested forms.

<localleader>em[mark]    Evaluate the form under the cursor at the given
                         |mark|. Set a regular Neovim mark on a form using
                         `mF` for example in any file, then jump to another
                         file. You can evaluate that form at any time with
                         `<localleader>emF`.

<localleader>ew          Evaluate the word under the cursor, good for peeking
                         inside vars defined in your file.

<localleader>ef          Evaluate the current file from disk. This may be
                         different to what's currently in your buffer if you
                         haven't saved!

<localleader>eb          Evaluate the current buffer contents. This may be
                         different to what's on disk if you've edited it
                         without saving.

K                        Look up documentation for the word under the cursor.
                         Support for this may vary between languages.

gd                       Go to the definition of the word under the cursor.
                         Support for this may vary between languages.

Language clients will provide their own extra mappings on top of these, you
can find links to their help in |conjure-clients|.

==============================================================================
CONFIGURATION                                          *conjure-configuration*

As mentioned in |conjure-mappings|, you can use `:ConjureConfig` to display or
set the different configuration values within Conjure. Here's the full list of
configuration available in the core plugin. Each language client will also
have it's own set of mappings and configuration you can tweak.

As an example, we can change the default prefix from `<localleader>` to `,c`
with the following command:
>
    :ConjureConfig mappings.prefix ",c"

All mappings are prefixed by this by default. To have a mapping work without
the prefix simply wrap the string in a list.
>
    :ConjureConfig mappings.log-split ["ClS"]

Now you can hit `ClS` without a prefix in any Conjure support filetype buffer.
If you're lazy loading Conjure through your plugin manager you may want to use
the `g:conjure_config` variable instead, as mention later in this section.

`clients.[filetype]`
            Lua module path to use as a client for a filetype. This can be any
            module that adheres to the |conjure-clients| interface.
            Defaults:
             - `clients.fennel = "conjure.client.fennel.aniseed"`
             - `clients.clojure = "conjure.client.clojure.nrepl"`

`mappings.prefix`
            The key that proceeds most mappings.
            Default: `"<localleader>"`

`mappings.log-split`
            Opens the log in a horizontal split.
            Default: `"ls"`

`mappings.log-vsplit`
            Opens the log in a vertical split.
            Default: `"lv"`

`mappings.log-tab`
            Opens the log in a new tab.
            Default: `"lt"`

`mappings.eval-current-form`
            Evaluates the form under the cursor.
            Default: `"ee"`

`mappings.eval-root-form`
            Evaluates the root form under the cursor.
            Default: `"er"`

`mappings.eval-marked-form`
            Evaluates the form at the marks location.
            Default: `"em"`

`mappings.eval-word`
            Evaluates the word under the cursor.
            Default: `"ew"`

`mappings.eval-file`
            Evaluates the file from disk.
            Default: `"ef"`

`mappings.eval-buf`
            Evaluates the buffer from memory.
            Default: `"eb"`

`mappings.eval-visual`
            Evaluates the visual selection.
            Default: `"E"`

`mappings.eval-motion`
            Evaluates the following motion.
            Default: `"E"`

`mappings.doc-word`
            Looks up documentation for the word under the cursor.
            Default: `["K"]`

`mappings.def-word`
            Goes to the definition of the word under the cursor.
            Default: `["gd"]`

`log.hud.width`
            Width of the HUD as a percentage of the editor width.
            A float between 0.0 and 1.0.
            Default: `0.42`

`log.hud.height`
            Height of the HUD as a percentage of the editor height.
            A float between 0.0 and 1.0.
            Default: `0.3`

`log.hud.enabled?`
            Should the HUD be displayed at all.
            Default: `true`

`log.break-length`
            Length of the break comment (`; ---------...`) between log results
            in characters.
            Default: `80`

`log.trim.at`
            Trim the log once the line count passes the value.
            Default: `10000`

`log.trim.to`
            Trim the log down to this many lines when it gets too long.
            Default: `7000`

`extract.context-header-lines`
            How many lines of the file should be checked for a context
            (namespace name) such as `(module foo.bar)` or `(ns foo.bar)`
            which is used for setting the right context of evaluations.
            If you have buffers with huge comment headers you may want to set
            this higher.
            If a specific buffer isn't extracting the context correctly, you
            can override it by setting `b:conjure_context`.
            Default: `24`

`preview.sample-limit`
            Most evaluation actions create a line in the log buffer with a
            preview of the code that was evaluated as a reminder. This setting
            controls how long that preview should be before it trails off into
            ellipsis. It is a percentage value based on the width of the
            editor. This is so you can align it with the width of your HUD.
            A float between 0.0 and 1.0.
            Default: `0.3`

And finally some regular Neovim variables.

`b:conjure_context`
            Override the context name for a specific buffer, preventing
            Conjure from attempting to extract it from the first few lines
            defined by the `extract.context-header-lines` configuration value.
            Default: `undefined`

`g:conjure_config`
            An optional dictionary of string key value pairs. It's read when
            Conjure is first loaded and ends up setting the configuration keys
            to the dictionaries values, the keys work exactly the same as the
            first argument to `:ConjureConfig`. This would turn the HUD off.
            `let g:conjure_config = {"log.hud.enabled?": v:false}`
            It's intended to be used for when you're lazy loading Conjure
            through your plugin manager. If Conjure is already loaded you can
            just use `:ConjureConfig` directly.
            Default: `undefined`

==============================================================================
LOG                                                              *conjure-log*

The log buffer is a regular buffer that you can edit and interact with as you
normally would. You can even insert new code and evaluate it, seeing the
results at the bottom of the buffer, kind of like a regular REPL.

The log buffer will scroll along with new results if you leave your cursor on
the last line, like a terminal following along with new output.

If you'd like to stop it scrolling and just see a specific result for a while
you can move your cursor to it. Conjure will then leave that cursor where it
is, it'll only follow along if left on the last line of the buffer. To
continue following new output you can just press `G` to go to the bottom.

If a result is appended to the end of the log and you don't currently have a
log on your screen with the cursor following along, the HUD will
appear (unless you've disabled it through config). This is to ensure you
always see new entries, even if you're looking at something further up in the
log.

The HUD is a floating window that shows you the current tail of the log. It
tries to show you the top of extremely large results since the top of a data
structure tends to be more interesting than all the bottom. It'll vanish when
you move the cursor and can be turned off entirely through configuration.

The log will be automatically trimmed when it gets too long, this can be
tweaked with configuration. It will attempt to trim to a known good break
point so as to not cut a large data structure or string in half resulting in
broken highlighting in the rest of the log buffer.

==============================================================================
CLIENTS                                                      *conjure-clients*

Language clients are simply Lua modules (which can be compiled from Fennel
using something like Aniseed) that have a few essential properties and
functions in them.

The module doesn't have to be within Conjure's source tree, it can be inside a
3rd party plugin repository, you just connect a filetype to it with the
`clients.[filetype]` configuration option.

Conjure comes bundles with a set of built in clients, you can access their
specific helpfiles with this list.

 - |conjure-client-fennel-aniseed|
 - |conjure-client-clojure-nrepl|

When implementing a new language client you'll need to provide the following
values and functions at the top level of your module. You can split your
client up into separate modules and just build this API into your init module.
See the `conjure.client.clojure.nrepl` module for an example of this.

TODO

vim:tw=78:sw=2:ts=2:ft=help:norl:et:listchars=
